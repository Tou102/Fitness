package com.example.fitness

import androidx.compose.foundation.border
import androidx.compose.foundation.clickable
import androidx.compose.runtime.mutableStateOf
import androidx.compose.runtime.getValue
import androidx.compose.runtime.setValue
import androidx.compose.foundation.layout.*

import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.AlertDialog
import androidx.compose.material3.Button
import androidx.compose.material3.Card
import androidx.compose.material3.CardDefaults
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.ui.Modifier
import androidx.compose.ui.unit.dp
import androidx.compose.material3.MaterialTheme
import com.example.fitness.viewModel.ExerciseViewModel

import androidx.compose.material3.OutlinedTextField
import androidx.compose.runtime.remember

import androidx.navigation.NavHostController
import androidx.compose.ui.viewinterop.AndroidView
import com.example.fitness.entity.Exercise

import pl.droidsonroids.gif.GifImageView
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.LaunchedEffect


import androidx.compose.runtime.getValue

import androidx.compose.ui.graphics.Color
import androidx.compose.ui.platform.LocalContext
import coil.compose.AsyncImage
import coil.request.ImageRequest
import com.example.fitness.NutritionItem
import com.example.fitness.R



@Composable
fun WorkoutDetailScreen(
    navController: NavHostController,
    workoutType: String?,
    content: String,
    additionalContent: @Composable () -> Unit,
    onAdd: () -> Unit = {},
    onEdit: () -> Unit = {},
    onDelete: () -> Unit = {}
) {
    Column(
        modifier = Modifier
            .fillMaxSize()
            .padding(16.dp)
    ) {
        Column(
            modifier = Modifier
                .weight(1f)
                .verticalScroll(rememberScrollState())
        ) {
            Text(
                text = "B√†i t·∫≠p: $workoutType",
                style = MaterialTheme.typography.headlineMedium
            )
            Spacer(modifier = Modifier.height(12.dp))
            Text(
                text = content,
                style = MaterialTheme.typography.bodyLarge
            )
            Spacer(modifier = Modifier.height(16.dp))
            additionalContent()
        }

        Column {
            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = { navController.popBackStack() },
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Quay v·ªÅ")
                }
            }

            Spacer(modifier = Modifier.height(16.dp))

            Row(
                modifier = Modifier.fillMaxWidth(),
                horizontalArrangement = Arrangement.SpaceBetween
            ) {
                Button(
                    onClick = onAdd,
                    modifier = Modifier.weight(1f)
                ) {
                    Text("Th√™m")
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(
                    onClick = onEdit,
                    modifier = Modifier.weight(1f)
                ) {
                    Text("S·ª≠a")
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(
                    onClick = onDelete,
                    modifier = Modifier.weight(1f)
                ) {
                    Text("X√≥a")
                }
            }
        }
    }
}


@Composable
fun ExerciseGroupScreen(
    navController: NavHostController,
    exerciseViewModel: ExerciseViewModel,
    groupName: String,
    title: String,
    description: String,
    benefits: List<String>
) {
    val exercises by exerciseViewModel.exercises.collectAsState()

    var showDialog by remember { mutableStateOf(false) }
    var editingExercise by remember { mutableStateOf<Exercise?>(null) }

    LaunchedEffect(Unit) {
        exerciseViewModel.loadExercises()
    }

    val filteredExercises = exercises.filter { it.group == groupName }

    Column(
        modifier = Modifier
            .fillMaxSize()
            .verticalScroll(rememberScrollState())
            .padding(16.dp)
    ) {
        Text(text = title, style = MaterialTheme.typography.headlineMedium)
        Spacer(modifier = Modifier.height(12.dp))
        Text(text = description, style = MaterialTheme.typography.bodyLarge)
        Spacer(modifier = Modifier.height(16.dp))

        Card(
            modifier = Modifier.fillMaxWidth(),
            elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
        ) {
            Column(modifier = Modifier.padding(16.dp)) {
                Text(text = "L·ª£i √≠ch c·ªßa b√†i t·∫≠p:", style = MaterialTheme.typography.titleMedium)
                Spacer(modifier = Modifier.height(8.dp))
                benefits.forEach { benefit ->
                    Text(text = "- $benefit", style = MaterialTheme.typography.bodyMedium)
                }
            }
        }

        Spacer(modifier = Modifier.height(16.dp))

        filteredExercises.forEach { exercise ->
            ExerciseItem(
                exercise = exercise,
                onEdit = {
                    editingExercise = it
                    showDialog = true
                },
                onDelete = { exerciseViewModel.deleteExercise(it) },
                onStartExercise = {
                    navController.navigate("exercise_camera/${it.id}") // üëà ƒëi·ªÅu h∆∞·ªõng sang camera screen
                }
            )

        }

        Spacer(modifier = Modifier.height(16.dp))


        Button(
            onClick = {
                editingExercise = null
                showDialog = true
            },
            modifier = Modifier.fillMaxWidth()
        ) {
            Text("Th√™m b√†i t·∫≠p")
        }

    }

    if (showDialog) {
        ExerciseDialog(
            exercise = editingExercise,
            group = groupName,
            onDismiss = { showDialog = false },
            onSave = { exercise ->
                val updatedExercise = exercise.copy(group = groupName)
                if (exercise.id == 0) exerciseViewModel.addExercise(updatedExercise)
                else exerciseViewModel.updateExercise(updatedExercise)
                showDialog = false
            }
        )
    }
}


@Composable
fun FullBody(
    navController: NavHostController,
    exerciseViewModel: ExerciseViewModel
) {
    ExerciseGroupScreen(
        navController = navController,
        exerciseViewModel = exerciseViewModel,
        groupName = "FullBody",
        title = "B√†i t·∫≠p full body",
        description = "B√†i t·∫≠p to√†n th√¢n ph√π h·ª£p cho m·ªçi c·∫•p ƒë·ªô, gi√∫p tƒÉng s·ª©c m·∫°nh v√† s·ª± d·∫ªo dai.",
        benefits = listOf(
            "TƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° b·∫Øp to√†n di·ªán",
            "C·∫£i thi·ªán s·ª©c b·ªÅn v√† kh·∫£ nƒÉng v·∫≠n ƒë·ªông",
            "ƒê·ªët ch√°y calo hi·ªáu qu·∫£",
            "H·ªó tr·ª£ gi·∫£m c√¢n v√† duy tr√¨ v√≥c d√°ng",
            "TƒÉng c∆∞·ªùng s·ª©c kh·ªèe tim m·∫°ch",
            "Ph√π h·ª£p v·ªõi m·ªçi tr√¨nh ƒë·ªô t·∫≠p luy·ªán"
        )
    )
}

@Composable
fun Abs(navController: NavHostController, exerciseViewModel: ExerciseViewModel) {
    ExerciseGroupScreen(
        navController = navController,
        exerciseViewModel = exerciseViewModel,
        groupName = "Abs",
        title = "B√†i t·∫≠p c∆° b·ª•ng (Abs)",
        description = "B√†i t·∫≠p gi√∫p tƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° b·ª•ng, h·ªó tr·ª£ gi·ªØ thƒÉng b·∫±ng v√† c·∫£i thi·ªán v√≥c d√°ng.",
        benefits = listOf(
            "TƒÉng s·ª©c m·∫°nh v√πng b·ª•ng",
            "C·∫£i thi·ªán t∆∞ th·∫ø v√† thƒÉng b·∫±ng",
            "H·ªó tr·ª£ gi·∫£m m·ª° v√πng b·ª•ng",
            "Gi√∫p c∆° th·ªÉ sƒÉn ch·∫Øc h∆°n"
        )
    )
}

@Composable
fun Chest(
    navController: NavHostController,
    exerciseViewModel: ExerciseViewModel
) {
    ExerciseGroupScreen(
        navController = navController,
        exerciseViewModel = exerciseViewModel,
        groupName = "Chest",
        title = "B√†i t·∫≠p ng·ª±c (Chest)",
        description = "C√°c b√†i t·∫≠p tƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° ng·ª±c, gi√∫p ph√°t tri·ªÉn c∆° b·∫Øp v√† c·∫£i thi·ªán s·ª©c m·∫°nh t·ªïng th·ªÉ.",
        benefits = listOf(
            "TƒÉng c∆∞·ªùng s·ª©c m·∫°nh c∆° ng·ª±c",
            "C·∫£i thi·ªán t∆∞ th·∫ø v√† s·ª©c kh·ªèe t·ªïng th·ªÉ",
            "Ph√°t tri·ªÉn c∆° b·∫Øp sƒÉn ch·∫Øc",
            "H·ªó tr·ª£ th·ª±c hi·ªán c√°c ho·∫°t ƒë·ªông th·ªÉ ch·∫•t kh√°c"
        )
    )
}

@Composable
fun Arm(
    navController: NavHostController,
    exerciseViewModel: ExerciseViewModel
) {
    ExerciseGroupScreen(
        navController = navController,
        exerciseViewModel = exerciseViewModel,
        groupName = "Arm",
        title = "B√†i t·∫≠p tay (Arm)",
        description = "C√°c b√†i t·∫≠p gi√∫p ph√°t tri·ªÉn c∆° tay, tƒÉng s·ª©c m·∫°nh v√† s·ª± sƒÉn ch·∫Øc.",
        benefits = listOf(
            "TƒÉng s·ª©c m·∫°nh c∆° tay",
            "C·∫£i thi·ªán s·ª©c b·ªÅn v√† ƒë·ªô sƒÉn ch·∫Øc",
            "H·ªó tr·ª£ v·∫≠n ƒë·ªông v√† n√¢ng ƒë·ª°",
            "Gi√∫p ph√°t tri·ªÉn v√≥c d√°ng c√¢n ƒë·ªëi"
        )
    )
}



@Composable
fun GifImage(modifier: Modifier = Modifier, resId: Int) {
    AndroidView(
        modifier = modifier,
        factory = { context ->
            GifImageView(context).apply {
                setImageResource(resId)
            }
        }
    )
}

@Composable
fun ExerciseItem(
    exercise: Exercise,
    onEdit: (Exercise) -> Unit,
    onDelete: (Exercise) -> Unit,
    onStartExercise: (Exercise) -> Unit
) {
    Card(
        modifier = Modifier

            .fillMaxWidth()
            .padding(vertical = 4.dp),
        elevation = CardDefaults.cardElevation(defaultElevation = 4.dp)
    ) {
        Column(
            modifier = Modifier.padding(16.dp)
        ) {
            Text(
                text = exercise.name,
                style = MaterialTheme.typography.titleMedium
            )
            Spacer(modifier = Modifier.height(4.dp))
            Text(
                text = exercise.description ?: "",
                style = MaterialTheme.typography.bodyMedium

            )
            Spacer(modifier = Modifier.height(8.dp))

            // Hi·ªÉn th·ªã GIF ngay d∆∞·ªõi m√¥ t·∫£
            GifImage(
                modifier = Modifier
                    .fillMaxWidth()
                    .height(120.dp),
                resId = exercise.gifRes ?: R.drawable.exercise_1
            )

            Spacer(modifier = Modifier.height(8.dp))

            Row(
                horizontalArrangement = Arrangement.End,
                modifier = Modifier.fillMaxWidth()
            ) {
                Button(onClick = { onStartExercise(exercise) }) {
                    Text("T·∫≠p b√†i n√†y")
                }
                Button(onClick = { onEdit(exercise) }) {
                    Text("S·ª≠a")
                }
                Spacer(modifier = Modifier.width(8.dp))
                Button(onClick = { onDelete(exercise) }) {
                    Text("X√≥a")
                }
            }
        }
    }
}


@Composable
fun ExerciseDialog(
    exercise: Exercise?,
    group: String,
    onDismiss: () -> Unit,
    onSave: (Exercise) -> Unit
) {
    var name by remember { mutableStateOf(exercise?.name ?: "") }
    var description by remember { mutableStateOf(exercise?.description ?: "") }
    var repText by remember { mutableStateOf(exercise?.rep?.toString() ?: "") }
    var selectedGif by remember { mutableStateOf(exercise?.gifRes ?: R.drawable.exercise_1) }

    val gifOptions = listOf(
        R.drawable.exercise_1,
        R.drawable.exercise_2,
        R.drawable.exercise_3,
        R.drawable.exercise_4,
    )

    AlertDialog(
        onDismissRequest = onDismiss,
        title = { Text(if (exercise == null) "Th√™m b√†i t·∫≠p" else "S·ª≠a b√†i t·∫≠p") },
        text = {
            Column {
                OutlinedTextField(
                    value = name,
                    onValueChange = { name = it },
                    label = { Text("T√™n b√†i t·∫≠p") },
                    singleLine = true
                )
                OutlinedTextField(
                    value = description,
                    onValueChange = { description = it },
                    label = { Text("M√¥ t·∫£") }
                )
                OutlinedTextField(
                    value = repText,
                    onValueChange = {
                        repText = it.filter { c -> c.isDigit() }
                    },
                    label = { Text("S·ªë l·∫ßn (rep)") },
                    singleLine = true
                )

                Spacer(modifier = Modifier.height(12.dp))
                Text(text = "Ch·ªçn GIF:")

                Row(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(top = 8.dp),
                    horizontalArrangement = Arrangement.spacedBy(8.dp)
                ) {
                    gifOptions.forEach { gifRes ->
                        GifImage(
                            modifier = Modifier
                                .size(60.dp)
                                .border(
                                    width = if (selectedGif == gifRes) 3.dp else 1.dp,
                                    color = if (selectedGif == gifRes) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.onSurface.copy(alpha = 0.2f)
                                )
                                .clickable { selectedGif = gifRes },
                            resId = gifRes
                        )
                    }
                }
            }
        },
        confirmButton = {
            Button(
                onClick = {
                    val rep = repText.toIntOrNull() ?: 0
                    if (name.isNotBlank()) {
                        onSave(
                            Exercise(
                                id = exercise?.id ?: 0,
                                name = name,
                                description = description,
                                rep = rep,
                                gifRes = selectedGif,
                                group = group
                            )
                        )
                    }
                }
            ) {
                Text("L∆∞u")
            }
        },
        dismissButton = {
            Button(onClick = onDismiss) {
                Text("H·ªßy")
            }
        }
    )
}









